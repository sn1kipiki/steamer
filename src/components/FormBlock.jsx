import { Box, Checkbox, Group, NativeSelect, TextInput } from '@mantine/core'
import '@mantine/core/styles.css'
import { useForm } from '@mantine/form'
import { notifications } from '@mantine/notifications'
import React from 'react'
import { sendMessage } from '../api/telegram'

function FormBlock() {
	// const [isLoading, setIsLoading] = useState(false)

	const form = useForm({
		initialValues: {
			// email: '',
			city: '',
			phoneNumber: '',
			initial: '',
			message1: '',
			department: '',
			delivery: '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ',
			confirmation: true,
			
		},

		validate: {
			// email: value => (/^\S+@\S+$/.test(value) ? null : 'Invalid email'),
			phoneNumber: value =>
				/^\S/.test(value) ? null : '–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º',
			initial: value => (/^\S/.test(value) ? null : '–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º'),
			department: value => (/^\S/.test(value) ? null : '–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º'),
			city: value => (/^\S/.test(value) ? null : '–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤—è–∑–∫–æ–≤–∏–º'),
		},
	})

	const handleSubmit = async ({  phoneNumber, initial, message1, department, city, delivery, confirmation}) => {
		try {
			const message = `
			|| –ü–Ü–ë: ${initial} \n 
			|| –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phoneNumber} \n
			|| –ú—ñ—Å—Ç–æ: ${city} \n 
			|| –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–æ—á—Ç–∏: ${department} \n 
			|| –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${delivery}\n
			|| –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${
				message1 || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'
			 } \n
			|| –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ${confirmation ? "—Ç–∞–∫":"–Ω—ñ"}`

			await sendMessage(message)
			// console.log(message)

			notifications.show({
				autoClose: 10000,
				title: '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
				message:
					'–í–∞—à—É –∑–∞—è–≤–∫—É —Ä–æ–∑–≥–ª—è–Ω—É—Ç—å —Ç–∞ –∑–≤—è–∂—É—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üòá',
			})

			// setIsLoading(true)
		} catch (error) {
			form.setFieldError('email', error)
		}
		//  finally {
		// 	setIsLoading(false)
		// }
	}
	return (
		<Box miw={350} mx={10} className='form-box'>
			<form onSubmit={form.onSubmit(handleSubmit)}>
				<TextInput
					withAsterisk
					label='–ü–Ü–ë'
					placeholder='–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë'
					{...form.getInputProps('initial')}
				/>
				{/* <TextInput
					withAsterisk
					label='Email'
					placeholder='your@email.com'
					{...form.getInputProps('email')}
				/> */}
				<TextInput
					withAsterisk
					label='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É'
					placeholder='+380'
					{...form.getInputProps('phoneNumber')}
				/>
				<TextInput
					withAsterisk
					label='–ú—ñ—Å—Ç–æ'
					placeholder='–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞'
					{...form.getInputProps('city')}
				/>
				<TextInput
					withAsterisk
					label='–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—á—Ç–∏'
					placeholder='–ù–æ–≤–∞ –ø–æ—á—Ç–∞ ‚Ññ'
					{...form.getInputProps('department')}
				/>
				<NativeSelect
      
      // onChange={(event) =>  setDelivery(event.currentTarget.value)}
      data={['–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ','–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É', ]}
			label='–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏'
			{...form.getInputProps('delivery', { type: 'nativeselect' })}
			
    />
				<TextInput
					label='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–ü–∏—Ç–∞–Ω–Ω—è'
					placeholder='–∑–∞–ª–∏—à—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è'
					{...form.getInputProps('message1')}
				/>
				<Checkbox
					defaultChecked
					
					// onChange={(event) => setChecked(event.currentTarget.checked)}
          mt="md"
					color="orange"
          label="–∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –º–µ–Ω—ñ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π"
          {...form.getInputProps('confirmation', { type: 'checkbox' })}
        />

				<Group mt='md'>
					{/* <Button loading={isLoading} type='submit'>
						–ù–∞–¥—ñ—Å–ª–∞—Ç–∏
					</Button>
					<Button loading={isLoading} type='submit' className='order-button'>
						–∑–∞–º–æ–≤–∏—Ç–∏
					</Button> */}
					<button id="bottom" className='order-button'>–ó–ê–ú–û–í–ò–¢–ò</button>
				</Group>
			</form>
		</Box>
	)
}

export default FormBlock